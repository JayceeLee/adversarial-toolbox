"""Implementation of sample attack."""

from __future__ import absolute_import
from __future__ import division

import os

from cleverhans.attacks import CarliniWagnerL2
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow.contrib.slim.nets import inception

slim = tf.contrib.slim


tf.flags.DEFINE_string(
        'master', '', 'The address of the TensorFlow master to use.')

tf.flags.DEFINE_string(
        'checkpoint_path', './weights/inception_v3/inception_v3.ckpt', '')

tf.flags.DEFINE_string(
        'input_dir', '', 'Input directory with images.')

tf.flags.DEFINE_string(
        'output_dir', '', 'Output directory with images.')

tf.flags.DEFINE_integer(
        'image_width', 299, 'Width of each input images.')

tf.flags.DEFINE_integer(
        'image_height', 299, 'Height of each input images.')

tf.flags.DEFINE_integer(
        'batch_size', 64, 'How many images process at one time.')

FLAGS = tf.flags.FLAGS


def load_images(input_dir, batch_shape):
    """Read png images from input directory in batches.

    Args:
    input_dir: input directory
    batch_shape: shape of minibatch array, i.e. [batch_size, height, width, 3]

    Yields:
    filenames: list file names without path of each image
      Lenght of this list could be less than batch_size, in this case only
      first few images of the result are elements of the minibatch.
    images: array with all images from this batch
    """
    images = np.zeros(batch_shape)
    filenames = []
    idx = 0
    batch_size = batch_shape[0]
    for filepath in tf.gfile.Glob(os.path.join(input_dir, '*.png')):
        with tf.gfile.Open(filepath) as f:
            image = (np.array(Image.open(f).convert('RGB')).astype(np.float)
                     / 255.0)
        images[idx, :, :, :] = image * 2.0 - 1.0
        filenames.append(os.path.basename(filepath))
        idx += 1
        if idx == batch_size:
            yield filenames, images
            filenames = []
            images = np.zeros(batch_shape)
            idx = 0
    if idx > 0:
        yield filenames, images


def save_images(images, filenames, output_dir):
    """Saves images to the output directory.

    Args:
    images: array with minibatch of images
    filenames: list of filenames without path
      If number of file names in this list less than number of images in
      the minibatch then only first len(filenames) images will be saved.
    output_dir: directory where to save images
    """
    for i, filename in enumerate(filenames):
        with tf.gfile.Open(os.path.join(output_dir, filename), 'w') as f:
            img = (((images[i, :, :, :] + 1.0) * 0.5) * 255.0).astype(np.uint8)
            Image.fromarray(img).save(f, format='PNG')


class InceptionModel(object):
    """Model class for CleverHans library."""

    def __init__(self, num_classes):
        self.num_classes = num_classes
        self.built = False

    def __call__(self, x_input):
        """Constructs model and return probabilities for given input."""
        reuse = True if self.built else None
        with slim.arg_scope(inception.inception_v3_arg_scope()):
            _, end_points = inception.inception_v3(
                    x_input, num_classes=self.num_classes, is_training=False,
                    reuse=reuse)
        self.built = True
        output = end_points['Predictions']
        # Strip off the extra reshape op at the output
        probs = output.op.inputs[0]
        return probs


def main(_):

    tf.set_random_seed(1234)
    tf.logging.set_verbosity(tf.logging.INFO)
    batch_size = FLAGS.batch_size
    batch_shape = [batch_size, FLAGS.image_height, FLAGS.image_width, 3]
    nb_classes = 1001
    targeted = False
    print "Slow, sorry.."

    tf.logging.set_verbosity(tf.logging.INFO)

    with tf.Graph().as_default():
        # Prepare graph
        adv_inputs = tf.placeholder(tf.float32, shape=batch_shape)
        model = InceptionModel(nb_classes)
        print model
        cw = CarliniWagnerL2(model, back='tf', sess=None)
        cw_params = {'binary_search_steps': 1,
                     # "y": np.random.randint(1000, size=(16, 1001)),
                     "y": None,
                     'learning_rate': 0.1,
                     'max_iterations': 100,
                     'batch_size': batch_size * nb_classes if
                     targeted else batch_size,
                     'initial_const': 10}

        i = 0
        print FLAGS.checkpoint_path
        saver = tf.train.Saver(slim.get_model_variables())
        session_creator = tf.train.ChiefSessionCreator(
                scaffold=tf.train.Scaffold(saver=saver),
                checkpoint_filename_with_path=FLAGS.checkpoint_path,
                master=FLAGS.master)
    	with tf.train.MonitoredSession(session_creator=session_creator) as sess:
            print "nothing"
            """
            for filenames, images in load_images(FLAGS.input_dir, batch_shape):
                # adv_images = sess.run(x_adv, feed_dict={adv_inputs: images})
                adv_images = cw.generate_np(images, **cw_params)
                save_images(adv_images, filenames, FLAGS.output_dir)
                i += 1
                print i*64.
            """

if __name__ == '__main__':
    tf.app.run()
